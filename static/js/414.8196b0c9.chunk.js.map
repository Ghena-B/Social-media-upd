{"version":3,"file":"static/js/414.8196b0c9.chunk.js","mappings":"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","sources":["components/Forms/LoginForm.jsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"sourcesContent":["import {Button, Checkbox, Input} from \"antd\";\r\nimport {useForm, Controller} from \"react-hook-form\";\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    const {register, handleSubmit, control, formState: {errors}} = useForm();\r\n\r\n    const onSubmit = data => {\r\n        props.login(data.email, data.password, data.rememberMe, data.captcha);\r\n    }\r\n\r\n    return (<form onSubmit={handleSubmit(onSubmit)} action=\"\" name='login-form'>\r\n        <div style={{marginBottom: 20, maxWidth: 300}}>\r\n            <label htmlFor=\"email\">Email</label>\r\n            <Controller\r\n                name=\"email\"\r\n                control={control}\r\n                rules={{\r\n                    required: true, pattern: {\r\n                        value: /^\\S+@\\S+$/i, message: 'Invalid email format'\r\n                    }\r\n                }}\r\n                render={({field}) => <Input {...field} type=\"email\" placeholder=\"Login\"/>}\r\n            />\r\n            {errors.email && (<span>{errors.email.message}</span>)}\r\n        </div>\r\n        <div style={{marginBottom: 20, maxWidth: 300}}>\r\n            <label htmlFor=\"password\">Password</label>\r\n            <Controller\r\n                name=\"password\"\r\n                control={control}\r\n                rules={{\r\n                    required: true, minLength: {\r\n                        value: 4, message: 'Password must have at least 4 characters'\r\n                    }\r\n                }}\r\n                render={({field}) => <Input.Password {...field} placeholder=\"Password\"/>}\r\n            />\r\n            {errors.password && (<span>{errors.password.message}</span>)}\r\n        </div>\r\n        <div style={{marginBottom: 10}}>\r\n            <Controller\r\n                name=\"rememberMe\"\r\n                control={control}\r\n                render={({field}) => (<Checkbox\r\n                        {...field}\r\n                        checked={field.value}\r\n                        onChange={(e) => field.onChange(e.target.checked)}\r\n                    >\r\n                        Remember Me\r\n                    </Checkbox>)}\r\n            />\r\n        </div>\r\n        <div style={{marginBottom: 10}}>\r\n            {props.captcha && <img src={props.captcha} alt=\"captcha\"/>}\r\n            {props.captcha && (<Controller\r\n                    name=\"captcha\"\r\n                    control={control}\r\n                    rules={{required: true}}\r\n                    render={({field}) => <Input {...field} placeholder=\"Enter captcha\"/>}\r\n                />)}\r\n            {errors.captcha && (<span>{errors.captcha.message}</span>)}\r\n        </div>\r\n        <div>{props.errorMessage && <p>{props.errorMessage}</p>}</div>\r\n        <div>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Login\r\n            </Button>\r\n        </div>\r\n    </form>)\r\n};\r\nexport default LoginForm;\r\n","import React, {useEffect} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport LoginForm from \"../Forms/LoginForm\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean;\r\n    errorMessage: string;\r\n    captcha: string | null;\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void;\r\n};\r\n\r\nconst Login: React.FC<PropsType> = ({isAuth, login, errorMessage, captcha}) => {\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            navigate('/profile');\r\n        }\r\n    }, [isAuth, navigate]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm login={login} errorMessage={errorMessage} captcha={captcha}/>\r\n            <h3>Test account:</h3>\r\n            <div>Email: free@samuraijs.com</div>\r\n            <div>Password: free</div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport {actions, login} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuthorized,\r\n        errorMessage: state.auth.errorMessage,\r\n        captcha: state.auth.captchaUrl,\r\n    }\r\n};\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {login, setError: actions.setError})(Login)\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    errorMessage: string\r\n    captcha: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    setError: (errorMessage: string) => void\r\n}\r\ntype OwnPropsType = {}"],"names":["props","_useForm","useForm","handleSubmit","register","control","errors","formState","_jsxs","onSubmit","data","login","email","password","rememberMe","captcha","action","name","children","style","marginBottom","maxWidth","_jsx","htmlFor","Controller","rules","required","pattern","value","message","render","_ref","field","Input","_objectSpread","type","placeholder","minLength","_ref2","Password","_ref3","Checkbox","checked","onChange","e","target","src","alt","_ref4","errorMessage","Button","htmlType","isAuth","navigate","useNavigate","useEffect","LoginForm","connect","state","auth","isAuthorized","captchaUrl","setError","actions","Login"],"sourceRoot":""}