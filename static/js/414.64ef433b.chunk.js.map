{"version":3,"file":"static/js/414.64ef433b.chunk.js","mappings":"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","sources":["components/Forms/LoginForm.jsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { Input, Checkbox, Button, Form, Image } from \"antd\";\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    const { control, handleSubmit, formState: { errors } } = useForm();\r\n\r\n    const onSubmit = data => {\r\n        props.login(data.email, data.password, data.rememberMe, data.captcha);\r\n    }\r\n\r\n    return (\r\n        <Form layout=\"vertical\" onFinish={handleSubmit(onSubmit)}>\r\n            <Form.Item label=\"Email\" error={errors.email && errors.email.message}>\r\n                <Controller\r\n                    name=\"email\"\r\n                    control={control}\r\n                    rules={{\r\n                        required: 'Email is required',\r\n                        pattern: {\r\n                            value: /^\\S+@\\S+$/i,\r\n                            message: 'Invalid email format'\r\n                        }\r\n                    }}\r\n                    render={({ field }) => <Input {...field} type=\"email\" placeholder=\"Login\" style={{width: 300}}/>}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item label=\"Password\" error={errors.password && errors.password.message}>\r\n                <Controller\r\n                    name=\"password\"\r\n                    control={control}\r\n                    rules={{\r\n                        required: 'Password is required',\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: 'Password must have at least 6 characters',\r\n                        }\r\n                    }}\r\n                    render={({ field }) => <Input.Password {...field} placeholder=\"Password\" style={{width: 300}}/>}\r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Controller\r\n                    name=\"rememberMe\"\r\n                    control={control}\r\n                    render={({ field }) => (\r\n                        <Checkbox {...field} checked={field.value}>\r\n                            Remember Me\r\n                        </Checkbox>\r\n                    )}\r\n                />\r\n            </Form.Item>\r\n\r\n            {props.captcha && (\r\n                <Form.Item label=\"Captcha\">\r\n                    <Image src={props.captcha} alt=\"captcha\" />\r\n                    <Controller\r\n                        name=\"captcha\"\r\n                        control={control}\r\n                        rules={{ required: 'Captcha is required' }}\r\n                        render={({ field }) => <Input {...field} placeholder=\"Enter captcha\" />}\r\n                    />\r\n                    {errors.captcha && <span>{errors.captcha.message}</span>}\r\n                </Form.Item>\r\n            )}\r\n\r\n            {props.errorMessage && <p>{props.errorMessage}</p>}\r\n\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n                Login\r\n            </Button>\r\n        </Form>\r\n    )\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, {useEffect} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport LoginForm from \"../Forms/LoginForm\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean;\r\n    errorMessage: string;\r\n    captcha: string | null;\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void;\r\n};\r\n\r\nconst Login: React.FC<PropsType> = ({isAuth, login, errorMessage, captcha}) => {\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            navigate('/profile');\r\n        }\r\n    }, [isAuth, navigate]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm login={login} errorMessage={errorMessage} captcha={captcha}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n\r\n","import {connect} from \"react-redux\";\r\nimport Login from \"./Login\";\r\nimport {actions, login} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuthorized,\r\n        errorMessage: state.auth.errorMessage,\r\n        captcha: state.auth.captchaUrl,\r\n    }\r\n};\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {login, setError: actions.setError})(Login)\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    errorMessage: string\r\n    captcha: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n    setError: (errorMessage: string) => void\r\n}\r\ntype OwnPropsType = {}"],"names":["props","_useForm","useForm","control","handleSubmit","errors","formState","_jsxs","Form","layout","onFinish","data","login","email","password","rememberMe","captcha","children","_jsx","Item","label","error","message","Controller","name","rules","required","pattern","value","render","_ref","field","Input","_objectSpread","type","placeholder","style","width","minLength","_ref2","Password","_ref3","Checkbox","checked","Image","src","alt","_ref4","errorMessage","Button","htmlType","isAuth","navigate","useNavigate","useEffect","LoginForm","connect","state","auth","isAuthorized","captchaUrl","setError","actions","Login"],"sourceRoot":""}